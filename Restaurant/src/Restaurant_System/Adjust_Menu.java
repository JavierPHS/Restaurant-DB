/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Restaurant_System;

import Connector.mySQLConnector;
import static Connector.mySQLConnector.genID;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Xanakran
 */
public class Adjust_Menu extends javax.swing.JFrame {

    /**
     * Creates new form Adjust_Menu
     */
    String username;
    String name;
    
    public Adjust_Menu() {
        initComponents();
        this.setLocationRelativeTo(null);
        try {
        PreparedStatement ps;
        ResultSet rs;
        String query = "SELECT * FROM Menu";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        rs = ps.executeQuery();
        while (rs.next()) {
            if (rs.getString("itemType").equalsIgnoreCase("Burger")) {
                DefaultTableModel model = (DefaultTableModel) burgerTable.getModel();
                String a = rs.getString("itemID");
                String b = rs.getString("itemName");
                String c = rs.getString("itemPrice");
                model.addRow(new Object[]{a, b, c});
            }
            if (rs.getString("itemType").equalsIgnoreCase("Side")) {
                DefaultTableModel model = (DefaultTableModel) sideTable.getModel();
                String a = rs.getString("itemID");
                String b = rs.getString("itemName");
                String c = rs.getString("itemPrice");
                model.addRow(new Object[]{a, b, c});
            }
            if (rs.getString("itemType").equalsIgnoreCase("Drink")) {
                DefaultTableModel model = (DefaultTableModel) drinkTable.getModel();
                String a = rs.getString("itemID");
                String b = rs.getString("itemName");
                String c = rs.getString("itemPrice");
                model.addRow(new Object[]{a, b, c});
            }
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public Adjust_Menu(String user, String n) {
        initComponents();
        this.setLocationRelativeTo(null);
        username = user;
        name = n;
        try {
        PreparedStatement ps;
        ResultSet rs;
        String query = "SELECT * FROM Menu";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        rs = ps.executeQuery();
        while (rs.next()) {
            if (rs.getString("itemType").equalsIgnoreCase("Burger")) {
                DefaultTableModel model = (DefaultTableModel) burgerTable.getModel();
                String a = rs.getString("itemID");
                String b = rs.getString("itemName");
                String c = rs.getString("itemPrice");
                model.addRow(new Object[]{a, b, c});
            }
            if (rs.getString("itemType").equalsIgnoreCase("Side")) {
                DefaultTableModel model = (DefaultTableModel) sideTable.getModel();
                String a = rs.getString("itemID");
                String b = rs.getString("itemName");
                String c = rs.getString("itemPrice");
                model.addRow(new Object[]{a, b, c});
            }
            if (rs.getString("itemType").equalsIgnoreCase("Drink")) {
                DefaultTableModel model = (DefaultTableModel) drinkTable.getModel();
                String a = rs.getString("itemID");
                String b = rs.getString("itemName");
                String c = rs.getString("itemPrice");
                model.addRow(new Object[]{a, b, c});
            }
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemsTab = new javax.swing.JTabbedPane();
        burgersTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        burgerTable = new javax.swing.JTable();
        deleteItem = new javax.swing.JLabel();
        itemID = new javax.swing.JLabel();
        newPrice = new javax.swing.JLabel();
        deleteButtonA = new javax.swing.JButton();
        priceTextBurger = new javax.swing.JTextField();
        idTextBurger = new javax.swing.JTextField();
        addItem = new javax.swing.JLabel();
        newName = new javax.swing.JLabel();
        nameTextBurger = new javax.swing.JTextField();
        addButtonBurger = new javax.swing.JButton();
        txtShadow = new javax.swing.JLabel();
        txtShadow1 = new javax.swing.JLabel();
        sidesTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sideTable = new javax.swing.JTable();
        addItem1 = new javax.swing.JLabel();
        newName1 = new javax.swing.JLabel();
        nameTextSide = new javax.swing.JTextField();
        newPrice1 = new javax.swing.JLabel();
        priceTextSide = new javax.swing.JTextField();
        addButtonSide = new javax.swing.JButton();
        itemID1 = new javax.swing.JLabel();
        idTextSide = new javax.swing.JTextField();
        deleteButtonB = new javax.swing.JButton();
        deleteItem1 = new javax.swing.JLabel();
        txtShadow2 = new javax.swing.JLabel();
        txtShadow3 = new javax.swing.JLabel();
        drinksTab = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        drinkTable = new javax.swing.JTable();
        deleteItem2 = new javax.swing.JLabel();
        nameTextDrink = new javax.swing.JTextField();
        newName2 = new javax.swing.JLabel();
        newPrice2 = new javax.swing.JLabel();
        itemID2 = new javax.swing.JLabel();
        idTextDrink = new javax.swing.JTextField();
        deleteButtonC = new javax.swing.JButton();
        priceTextDrink = new javax.swing.JTextField();
        addButtonDrink = new javax.swing.JButton();
        addItem2 = new javax.swing.JLabel();
        txtShadow4 = new javax.swing.JLabel();
        txtShadow5 = new javax.swing.JLabel();
        Homebutton = new javax.swing.JButton();
        Banner = new javax.swing.JLabel();
        BannerColor = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        itemsTab.setFocusable(false);
        itemsTab.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        burgersTab.setBackground(new java.awt.Color(255, 255, 255));
        burgersTab.setOpaque(false);
        burgersTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        burgerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "ItemName", "ItemPrice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        burgerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(burgerTable);

        burgersTab.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 580, 130));

        deleteItem.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteItem.setForeground(new java.awt.Color(255, 255, 255));
        deleteItem.setText("DELETE ITEM");
        burgersTab.add(deleteItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 230, 170, 33));

        itemID.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        itemID.setForeground(new java.awt.Color(255, 255, 255));
        itemID.setText("Enter Item ID:");
        burgersTab.add(itemID, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 310, 180, 33));

        newPrice.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        newPrice.setForeground(new java.awt.Color(255, 255, 255));
        newPrice.setText("New Item Price:");
        burgersTab.add(newPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 210, 33));

        deleteButtonA.setText("Delete Item");
        deleteButtonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonAActionPerformed(evt);
            }
        });
        burgersTab.add(deleteButtonA, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, 200, 54));
        burgersTab.add(priceTextBurger, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 342, 260, 30));

        idTextBurger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextBurgerActionPerformed(evt);
            }
        });
        burgersTab.add(idTextBurger, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 312, 130, 30));

        addItem.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        addItem.setForeground(new java.awt.Color(255, 255, 255));
        addItem.setText("ADD ITEM");
        burgersTab.add(addItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 130, 33));

        newName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        newName.setForeground(new java.awt.Color(255, 255, 255));
        newName.setText("New Item Name:");
        burgersTab.add(newName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 210, 33));
        burgersTab.add(nameTextBurger, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 282, 260, 30));

        addButtonBurger.setText("Add New Item");
        addButtonBurger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonBurgerActionPerformed(evt);
            }
        });
        burgersTab.add(addButtonBurger, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 470, 54));

        txtShadow.setBackground(new java.awt.Color(0,0,0,128));
        txtShadow.setOpaque(true);
        burgersTab.add(txtShadow, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 220, 360, 240));

        txtShadow1.setBackground(new java.awt.Color(0,0,0,128));
        txtShadow1.setOpaque(true);
        burgersTab.add(txtShadow1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 520, 240));

        itemsTab.addTab("Burgers", burgersTab);

        sidesTab.setBackground(new java.awt.Color(255, 255, 255));
        sidesTab.setOpaque(false);
        sidesTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sideTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "ItemName", "ItemPrice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sideTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(sideTable);

        sidesTab.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 580, 130));

        addItem1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        addItem1.setForeground(new java.awt.Color(255, 255, 255));
        addItem1.setText("ADD ITEM");
        sidesTab.add(addItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 130, 33));

        newName1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        newName1.setForeground(new java.awt.Color(255, 255, 255));
        newName1.setText("New Item Name:");
        sidesTab.add(newName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 210, 33));
        sidesTab.add(nameTextSide, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 282, 260, 30));

        newPrice1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        newPrice1.setForeground(new java.awt.Color(255, 255, 255));
        newPrice1.setText("New Item Price:");
        sidesTab.add(newPrice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 210, 33));
        sidesTab.add(priceTextSide, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 342, 260, 30));

        addButtonSide.setText("Add New Item");
        addButtonSide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonSideActionPerformed(evt);
            }
        });
        sidesTab.add(addButtonSide, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 470, 54));

        itemID1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        itemID1.setForeground(new java.awt.Color(255, 255, 255));
        itemID1.setText("Enter Item ID:");
        sidesTab.add(itemID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 310, 180, 33));
        sidesTab.add(idTextSide, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 312, 130, 30));

        deleteButtonB.setText("Delete Item");
        deleteButtonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonBActionPerformed(evt);
            }
        });
        sidesTab.add(deleteButtonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, 200, 54));

        deleteItem1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteItem1.setForeground(new java.awt.Color(255, 255, 255));
        deleteItem1.setText("DELETE ITEM");
        sidesTab.add(deleteItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 230, 170, 33));

        txtShadow2.setBackground(new java.awt.Color(0,0,0,128));
        txtShadow2.setOpaque(true);
        sidesTab.add(txtShadow2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 520, 240));

        txtShadow3.setBackground(new java.awt.Color(0,0,0,128));
        txtShadow3.setOpaque(true);
        sidesTab.add(txtShadow3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 220, 360, 240));

        itemsTab.addTab("Sides", sidesTab);

        drinksTab.setBackground(new java.awt.Color(255, 255, 255));
        drinksTab.setOpaque(false);
        drinksTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        drinkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "ItemName", "ItemPrice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        drinkTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(drinkTable);

        drinksTab.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 580, 130));

        deleteItem2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteItem2.setForeground(new java.awt.Color(255, 255, 255));
        deleteItem2.setText("DELETE ITEM");
        drinksTab.add(deleteItem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 230, 170, 33));
        drinksTab.add(nameTextDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 282, 260, 30));

        newName2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        newName2.setForeground(new java.awt.Color(255, 255, 255));
        newName2.setText("New Item Name:");
        drinksTab.add(newName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 210, 33));

        newPrice2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        newPrice2.setForeground(new java.awt.Color(255, 255, 255));
        newPrice2.setText("New Item Price:");
        drinksTab.add(newPrice2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 210, 33));

        itemID2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        itemID2.setForeground(new java.awt.Color(255, 255, 255));
        itemID2.setText("Enter Item ID:");
        drinksTab.add(itemID2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 310, 180, 33));
        drinksTab.add(idTextDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 312, 130, 30));

        deleteButtonC.setText("Delete Item");
        deleteButtonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonCActionPerformed(evt);
            }
        });
        drinksTab.add(deleteButtonC, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, 200, 54));
        drinksTab.add(priceTextDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 342, 260, 30));

        addButtonDrink.setText("Add New Item");
        addButtonDrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonDrinkActionPerformed(evt);
            }
        });
        drinksTab.add(addButtonDrink, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 470, 54));

        addItem2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        addItem2.setForeground(new java.awt.Color(255, 255, 255));
        addItem2.setText("ADD ITEM");
        drinksTab.add(addItem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 130, 33));

        txtShadow4.setBackground(new java.awt.Color(0,0,0,128));
        txtShadow4.setOpaque(true);
        drinksTab.add(txtShadow4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 520, 240));

        txtShadow5.setBackground(new java.awt.Color(0,0,0,128));
        txtShadow5.setOpaque(true);
        drinksTab.add(txtShadow5, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 220, 360, 240));

        itemsTab.addTab("Drinks", drinksTab);

        getContentPane().add(itemsTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 990, 500));

        Homebutton.setText("Main Menu");
        Homebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomebuttonActionPerformed(evt);
            }
        });
        getContentPane().add(Homebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, 129, 54));

        Banner.setFont(new java.awt.Font("Verdana", 3, 36)); // NOI18N
        Banner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Banner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Banner.png"))); // NOI18N
        Banner.setText("Johnny's Burgers");
        getContentPane().add(Banner, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 480, -1));

        BannerColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Color.png"))); // NOI18N
        BannerColor.setText("jLabel1");
        BannerColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        getContentPane().add(BannerColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, 70));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Menu_Picture.png"))); // NOI18N
        Background.setText("jLabel1");
        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomebuttonActionPerformed
        Manager_Menu mm = new Manager_Menu(username, name);
        mm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_HomebuttonActionPerformed

    private void deleteButtonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonAActionPerformed
        try {
        PreparedStatement ps;
        ResultSet rs;
        String query = "DELETE from Menu WHERE itemID = ?";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        ps.setInt(1, Integer.parseInt(idTextBurger.getText()));
        if (ps.executeUpdate() > 0) { //insert successful
            query = "SELECT * FROM Menu";
            ps = mySQLConnector.setConnection().prepareStatement(query);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) burgerTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                if (rs.getString("itemType").equalsIgnoreCase("Burger")) {
                    String a = rs.getString("itemID");
                    String b = rs.getString("itemName");
                    String c = rs.getString("itemPrice");
                    model.addRow(new Object[]{a, b, c});
                }
            }
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonAActionPerformed

    private void addButtonBurgerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonBurgerActionPerformed
        try {
        PreparedStatement ps;
        int ID = genID("Menu");
        float price = Float.parseFloat(priceTextBurger.getText());
        String query = "INSERT into Menu values(?,?,?,?,?)";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        ps.setInt(1, ID);
        ps.setString(2, "Burger");
        ps.setString(3, nameTextBurger.getText());
        ps.setFloat(4, price);
        ps.setString(5, username);
        if (ps.executeUpdate() > 0) { //insert successful
            DefaultTableModel model = (DefaultTableModel) burgerTable.getModel();
            String a = "" + ID;
            String b = nameTextBurger.getText();
            String c = "" + price;
            model.addRow(new Object[]{a, b, c});
            nameTextBurger.setText("");
            priceTextBurger.setText("");
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonBurgerActionPerformed

    private void addButtonSideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonSideActionPerformed
        try {
        PreparedStatement ps;
        int ID = genID("Menu");
        float price = Float.parseFloat(priceTextSide.getText());
        String query = "INSERT into Menu values(?,?,?,?,?)";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        ps.setInt(1, ID);
        ps.setString(2, "Side");
        ps.setString(3, nameTextSide.getText());
        ps.setFloat(4, price);
        ps.setString(5, username);
        if (ps.executeUpdate() > 0) { //insert successful
            DefaultTableModel model = (DefaultTableModel) sideTable.getModel();
            String a = "" + ID;
            String b = nameTextSide.getText();
            String c = "" + price;
            model.addRow(new Object[]{a, b, c});
            nameTextSide.setText("");
            priceTextSide.setText("");
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonSideActionPerformed

    private void deleteButtonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonBActionPerformed
        try {
        PreparedStatement ps;
        ResultSet rs;
        String query = "DELETE from Menu WHERE itemID = ?";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        ps.setInt(1, Integer.parseInt(idTextSide.getText()));
        if (ps.executeUpdate() > 0) { //insert successful
            query = "SELECT * FROM Menu";
            ps = mySQLConnector.setConnection().prepareStatement(query);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) sideTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                if (rs.getString("itemType").equalsIgnoreCase("Side")) {
                    String a = rs.getString("itemID");
                    String b = rs.getString("itemName");
                    String c = rs.getString("itemPrice");
                    model.addRow(new Object[]{a, b, c});
                }
            }
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonBActionPerformed

    private void deleteButtonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonCActionPerformed
        try {
        PreparedStatement ps;
        ResultSet rs;
        String query = "DELETE from Menu WHERE itemID = ?";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        ps.setInt(1, Integer.parseInt(idTextDrink.getText()));
        if (ps.executeUpdate() > 0) { //insert successful
            query = "SELECT * FROM Menu";
            ps = mySQLConnector.setConnection().prepareStatement(query);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) drinkTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                if (rs.getString("itemType").equalsIgnoreCase("Drink")) {
                    String a = rs.getString("itemID");
                    String b = rs.getString("itemName");
                    String c = rs.getString("itemPrice");
                    model.addRow(new Object[]{a, b, c});
                }
            }
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonCActionPerformed

    private void addButtonDrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonDrinkActionPerformed
        try {
        PreparedStatement ps;
        int ID = genID("Menu");
        float price = Float.parseFloat(priceTextDrink.getText());
        String query = "INSERT into Menu values(?,?,?,?,?)";
        ps = mySQLConnector.setConnection().prepareStatement(query);
        ps.setInt(1, ID);
        ps.setString(2, "Drink");
        ps.setString(3, nameTextDrink.getText());
        ps.setFloat(4, price);
        ps.setString(5, username);
        if (ps.executeUpdate() > 0) { //insert successful
            DefaultTableModel model = (DefaultTableModel) drinkTable.getModel();
            String a = "" + ID;
            String b = nameTextDrink.getText();
            String c = "" + price;
            model.addRow(new Object[]{a, b, c});
            nameTextDrink.setText("");
            priceTextDrink.setText("");
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonDrinkActionPerformed

    private void idTextBurgerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextBurgerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextBurgerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adjust_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adjust_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adjust_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adjust_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Adjust_Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JLabel Banner;
    private javax.swing.JLabel BannerColor;
    private javax.swing.JButton Homebutton;
    private javax.swing.JButton addButtonBurger;
    private javax.swing.JButton addButtonDrink;
    private javax.swing.JButton addButtonSide;
    private javax.swing.JLabel addItem;
    private javax.swing.JLabel addItem1;
    private javax.swing.JLabel addItem2;
    private javax.swing.JTable burgerTable;
    private javax.swing.JPanel burgersTab;
    private javax.swing.JButton deleteButtonA;
    private javax.swing.JButton deleteButtonB;
    private javax.swing.JButton deleteButtonC;
    private javax.swing.JLabel deleteItem;
    private javax.swing.JLabel deleteItem1;
    private javax.swing.JLabel deleteItem2;
    private javax.swing.JTable drinkTable;
    private javax.swing.JPanel drinksTab;
    private javax.swing.JTextField idTextBurger;
    private javax.swing.JTextField idTextDrink;
    private javax.swing.JTextField idTextSide;
    private javax.swing.JLabel itemID;
    private javax.swing.JLabel itemID1;
    private javax.swing.JLabel itemID2;
    private javax.swing.JTabbedPane itemsTab;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField nameTextBurger;
    private javax.swing.JTextField nameTextDrink;
    private javax.swing.JTextField nameTextSide;
    private javax.swing.JLabel newName;
    private javax.swing.JLabel newName1;
    private javax.swing.JLabel newName2;
    private javax.swing.JLabel newPrice;
    private javax.swing.JLabel newPrice1;
    private javax.swing.JLabel newPrice2;
    private javax.swing.JTextField priceTextBurger;
    private javax.swing.JTextField priceTextDrink;
    private javax.swing.JTextField priceTextSide;
    private javax.swing.JTable sideTable;
    private javax.swing.JPanel sidesTab;
    private javax.swing.JLabel txtShadow;
    private javax.swing.JLabel txtShadow1;
    private javax.swing.JLabel txtShadow2;
    private javax.swing.JLabel txtShadow3;
    private javax.swing.JLabel txtShadow4;
    private javax.swing.JLabel txtShadow5;
    // End of variables declaration//GEN-END:variables
}
